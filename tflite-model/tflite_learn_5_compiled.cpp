/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 03.04.2024 02:59:15

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1568;
#else
constexpr int kTensorArenaSize = 544;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,63 } };
const ALIGN(16) float tensor_data1[10] = { -0.024551091715693474, -0.046677257865667343, -0.01055566780269146, 0, 0, -0.022473927587270737, -0.013148907572031021, 0, 0.032567258924245834, -0.044599112123250961, };
const TfArray<1, int> tensor_dimension1 = { 1, { 10 } };
const ALIGN(16) float tensor_data2[5] = { 0.045418106019496918, -0.0042826263234019279, 0.04101983830332756, -0.038620982319116592, 0.04926806315779686, };
const TfArray<1, int> tensor_dimension2 = { 1, { 5 } };
const ALIGN(16) float tensor_data3[10*63] = { 
  -0.027643416076898575, 0.24074555933475494, -0.062635086476802826, 0.041315387934446335, -0.078701488673686981, 0.11593127250671387, 0.25686269998550415, -0.29733595252037048, 0.053671561181545258, -0.24701157212257385, 0.11322652548551559, -0.12998133897781372, 0.066387467086315155, 0.18950517475605011, -0.21030955016613007, 0.0092923520132899284, 0.068843178451061249, -0.044630613178014755, -0.23622196912765503, 0.10931704193353653, 0.012953357771039009, -0.23881867527961731, 0.091330468654632568, 0.06108996644616127, -0.27370762825012207, 0.05000431090593338, -0.16652572154998779, -0.19657948613166809, -0.086155667901039124, 0.11735112220048904, 0.2231505811214447, -0.19032271206378937, 0.043621622025966644, 0.0048094522207975388, 0.22921386361122131, -0.027447883039712906, -0.15135765075683594, 0.075729012489318848, -0.16116476058959961, 0.035751465708017349, 0.26828488707542419, -0.21841582655906677, -0.097785606980323792, 0.10808642953634262, 0.21053485572338104, -0.2852742075920105, 0.022394979372620583, 0.22025091946125031, -0.23509152233600616, 0.20989680290222168, 0.15462963283061981, -0.075745552778244019, -0.16236321628093719, -0.15995626151561737, -0.13541363179683685, -0.063179314136505127, -0.21641868352890015, 0.18183077871799469, -0.27464690804481506, 0.17172624170780182, 0.045224294066429138, -0.28636026382446289, 0.11618030816316605, 
  -0.32349565625190735, -0.07949153333902359, -0.06528937816619873, 0.04992511123418808, 0.18496103584766388, 0.21186883747577667, 0.080827698111534119, -0.13305716216564178, -0.12985950708389282, -0.2645753026008606, 0.00013600685633718967, -0.30013522505760193, 0.045172467827796936, 0.32805204391479492, 0.037630204111337662, -0.15677247941493988, 0.077032566070556641, 0.16153663396835327, 0.21381199359893799, -0.028883721679449081, -0.13543088734149933, 0.19699409604072571, 0.083722777664661407, 0.21456684172153473, -0.0088532008230686188, 0.13444264233112335, 0.083841919898986816, 0.30375286936759949, 0.12529358267784119, -0.14916127920150757, -0.19904886186122894, 0.081174455583095551, 0.17257946729660034, -0.14990165829658508, 0.18429592251777649, -0.14704723656177521, 0.24058274924755096, 0.20950350165367126, -0.21579430997371674, -0.038252227008342743, -0.045477245002985001, -0.019639309495687485, -0.074616558849811554, -0.10778676718473434, 0.18568430840969086, 0.22534289956092834, -0.099239915609359741, 0.028863053768873215, 0.18957355618476868, 0.040266301482915878, 0.090151213109493256, 0.065809987485408783, -0.097219616174697876, 0.13281011581420898, 0.22777403891086578, 0.18500214815139771, -0.11467297375202179, 0.2403930276632309, -0.25393444299697876, 0.0627179816365242, -0.089696243405342102, -0.058312784880399704, 0.30801191926002502, 
  0.16107328236103058, -0.15600411593914032, -0.05633901059627533, -0.29280126094818115, -0.25798225402832031, -0.0035629146732389927, -0.18710984289646149, -0.10168026387691498, 0.11390834301710129, 0.1604103147983551, -0.1595272421836853, -0.26134249567985535, 0.15866035223007202, -0.160948246717453, 0.23079678416252136, -0.26506498456001282, 0.25945770740509033, -0.23886282742023468, -0.043241333216428757, 0.1449204683303833, -0.19932442903518677, -0.074230141937732697, 0.046353459358215332, -0.27394309639930725, -0.21518824994564056, 0.058174118399620056, 0.13406138122081757, 0.16472542285919189, -0.17248213291168213, -0.10123533755540848, 0.18610085546970367, 0.20075406134128571, 0.080712608993053436, 0.003346156096085906, 0.1762535572052002, -0.1055428609251976, 0.0037698403466492891, 0.22540435194969177, 0.11050917953252792, -0.088538646697998047, 0.27679505944252014, 0.13962332904338837, -0.27563163638114929, 0.14788655936717987, 0.14479959011077881, -0.18996675312519073, -0.22636574506759644, 0.17375738918781281, 0.045973952859640121, 0.13205844163894653, -0.082110665738582611, -0.10065879672765732, 0.26016518473625183, 0.0045019290409982204, 0.15359117090702057, -0.12877917289733887, -0.15874262154102325, 0.2253943532705307, -0.23469392955303192, -0.088050790131092072, -0.15823046863079071, -0.13010984659194946, 0.19081224501132965, 
  -0.23461860418319702, 0.067228436470031738, 0.14818224310874939, -0.28547361493110657, -0.15000936388969421, -0.15539629757404327, 0.1677858829498291, -0.015547454357147217, -0.023408621549606323, 0.25388076901435852, 0.16455471515655518, 0.27545389533042908, -0.027677297592163086, -0.23990902304649353, 0.27374914288520813, 0.26468071341514587, 0.14023709297180176, -0.039187431335449219, -0.239359050989151, 0.067034512758255005, 0.22998055815696716, 0.05368649959564209, 0.22630307078361511, 0.07514384388923645, 0.13708445429801941, 0.25097772479057312, 0.1744638979434967, 0.07619088888168335, 0.1212996244430542, -0.054674327373504639, -0.063213467597961426, -0.20231276750564575, -0.21604642271995544, -0.28578865528106689, -0.13724543154239655, -0.046323910355567932, 0.093929588794708252, -0.23058362305164337, 0.17829048633575439, -0.10581080615520477, -0.18525382876396179, -0.21801838278770447, 0.11522302031517029, -0.22510646283626556, -0.18269601464271545, -0.014763116836547852, -0.10588592290878296, -0.092756643891334534, 0.17094984650611877, -0.12179209291934967, 0.14377212524414062, -0.28490826487541199, -0.20261529088020325, -0.19202092289924622, 0.16774389147758484, 0.24392244219779968, 0.2360866367816925, -0.04671160876750946, 0.18354767560958862, 0.021222412586212158, -0.125827357172966, 0.086586475372314453, 0.11682704091072083, 
  0.23055949807167053, 0.25808647274971008, 0.057387799024581909, -0.24081079661846161, 0.045481055974960327, -0.15461175143718719, -0.1789737343788147, 0.054568648338317871, -0.22539928555488586, 0.018933564424514771, -0.21272695064544678, -0.16984580457210541, 0.2368142306804657, -0.1278211921453476, -0.068335801362991333, 0.096228480339050293, -0.13390839099884033, 0.13337674736976624, 0.16635975241661072, 0.093529105186462402, -0.083213403820991516, 0.2736990749835968, 0.051492184400558472, -0.2826884388923645, -0.17809629440307617, -0.24443928897380829, -0.12599092721939087, 0.27425584197044373, -0.19615796208381653, -0.27959206700325012, 0.15248695015907288, -0.11038686335086823, 0.16366115212440491, -0.25235307216644287, 0.18574431538581848, 0.036656200885772705, -0.024649262428283691, 0.15958663821220398, -0.066374972462654114, -0.22548110783100128, -0.031924426555633545, 0.23821035027503967, 0.25996199250221252, 0.27486291527748108, -0.057477325201034546, -0.14431308209896088, -0.045795410871505737, 0.20504659414291382, -0.090948238968849182, -0.26793879270553589, 0.012149989604949951, -0.16920104622840881, 0.20435696840286255, -0.042273819446563721, 0.19139543175697327, -0.2344173789024353, -0.260640949010849, 0.2222573459148407, -0.22566251456737518, -0.079609721899032593, 0.12804976105690002, 0.28496339917182922, -0.18399675190448761, 
  -0.10650770366191864, -0.01962774246931076, 0.19057545065879822, 0.21813338994979858, 0.028564143925905228, -0.23004646599292755, 0.0096594113856554031, -0.29006305336952209, -0.11826144158840179, -0.28859329223632812, -0.24712797999382019, 0.055198967456817627, 0.0062285992316901684, -0.012779613956809044, 0.25975409150123596, 0.023448556661605835, -0.13260549306869507, 0.080581456422805786, 0.039983142167329788, 0.11367121338844299, -0.24270839989185333, -0.039798479527235031, -0.11872638016939163, 0.086886286735534668, -0.30213901400566101, -0.18128308653831482, 0.15082024037837982, 0.15414828062057495, 0.026743356138467789, 0.11354838311672211, -0.027510013431310654, 0.197479248046875, -0.27886819839477539, 0.038743667304515839, 0.1031780019402504, 0.10300663858652115, -0.10664288699626923, 0.077091589570045471, 0.0014799297787249088, 0.14548325538635254, -0.21214419603347778, -0.23884595930576324, -0.25668022036552429, 0.21564079821109772, -0.049605578184127808, -0.25458994507789612, -0.16417330503463745, 0.12876555323600769, 0.22961129248142242, 0.042587611824274063, -0.096300423145294189, -0.020501187071204185, 0.054830491542816162, -0.14918321371078491, -0.031045418232679367, -0.080773085355758667, -0.15684498846530914, -0.076833046972751617, 0.25789058208465576, -0.17933984100818634, -0.076096348464488983, 0.058588568121194839, -0.0062891063280403614, 
  0.15586501359939575, 0.034324586391448975, -0.073652736842632294, -0.16858257353305817, -0.11237675696611404, -0.1401238739490509, -0.14905029535293579, -0.035092134028673172, -0.18886213004589081, 0.21593721210956573, -0.29186567664146423, -0.087647922337055206, -0.10940898209810257, -0.07719055563211441, 0.18258912861347198, -0.22960042953491211, -0.11288166791200638, 0.087092265486717224, 0.023014623671770096, -0.24045619368553162, -0.003739300649613142, -0.25779148936271667, -0.02816450223326683, -0.10244210809469223, -0.0071838060393929482, 0.05207187682390213, 0.17211493849754333, 0.14808674156665802, 0.10097777843475342, -0.10602694749832153, -0.057356461882591248, 0.092089667916297913, -0.12796017527580261, -0.21193899214267731, -0.13044579327106476, -0.15080676972866058, 0.26873791217803955, 0.11156749725341797, 0.20998553931713104, -0.10474789142608643, -0.13882195949554443, -0.22306452691555023, 0.04496094211935997, -0.17335298657417297, -0.13641418516635895, 0.098311886191368103, 0.16031193733215332, -0.11134982109069824, -0.098733589053153992, 0.10450122505426407, -0.041001994162797928, -0.10721606016159058, 0.27051228284835815, -0.051052719354629517, -0.23852419853210449, 0.23137357831001282, 0.21939539909362793, -0.21104975044727325, 0.067239753901958466, 0.19558992981910706, 0.19052791595458984, 0.10077688843011856, -0.23712360858917236, 
  0.20849928259849548, -0.053662508726119995, -0.27924394607543945, 0.14031952619552612, 0.079562842845916748, 0.25342032313346863, 0.2409234344959259, 0.20075547695159912, 0.24538365006446838, 0.20687323808670044, 0.0807209312915802, -0.088001161813735962, 0.076718747615814209, -0.11096574366092682, 0.11436232924461365, 0.23740777373313904, -0.091327190399169922, 0.098031461238861084, 0.23697105050086975, -0.036838769912719727, -0.06183740496635437, -0.10057631134986877, 0.27202042937278748, 0.27690127491950989, -0.10136646032333374, -0.10055314004421234, 0.11010190844535828, 0.20172163844108582, -0.18610720336437225, -0.20366005599498749, -0.27367112040519714, -0.095300927758216858, -0.094984725117683411, -0.19871371984481812, -0.15231305360794067, 0.074070245027542114, -0.19238770008087158, 0.26215597987174988, 0.26312103867530823, -0.15463040769100189, 0.23305496573448181, 0.15212720632553101, -0.18270441889762878, -0.12071950733661652, -0.15212228894233704, -0.21027705073356628, -0.0068489909172058105, 0.27978208661079407, -0.064659535884857178, -0.15321503579616547, 0.27083060145378113, -0.22072336077690125, -0.079438433051109314, -0.14378730952739716, 0.076072484254837036, 0.091872245073318481, -0.26924720406532288, -0.020300000905990601, -0.042558997869491577, -0.1646847128868103, 0.06126365065574646, -0.03745722770690918, 0.26111403107643127, 
  0.18877363204956055, -0.21433064341545105, 0.3068564236164093, -0.038676992058753967, 0.20586301386356354, 0.18147663772106171, -0.08094450831413269, -0.24512575566768646, -0.21298313140869141, 0.17178511619567871, 0.20891274511814117, 0.061305500566959381, 0.0015322370454668999, -0.21715837717056274, -0.13726036250591278, -0.010540196672081947, 0.0098765594884753227, 0.023740753531455994, -0.0086689116433262825, -0.1266893595457077, -0.014968502335250378, -0.23372824490070343, 0.1824004054069519, -0.076633751392364502, 0.19537617266178131, -0.20937937498092651, -0.11202104389667511, -0.23444706201553345, 0.074360601603984833, -0.19331806898117065, -0.088610529899597168, -0.11853969842195511, 0.1504555344581604, 0.05926089733839035, -0.1630769819021225, -0.13811643421649933, 0.29383209347724915, -0.12345945090055466, 0.089150458574295044, 0.14247310161590576, 0.26935505867004395, -0.17152275145053864, 0.22518458962440491, 0.26882001757621765, 0.28626775741577148, -0.12230052053928375, 0.1456676572561264, 0.21779452264308929, 0.14183783531188965, -0.091065205633640289, 0.2132733166217804, -0.21578934788703918, 0.23562560975551605, 0.021867744624614716, -0.046641390770673752, -0.1114419624209404, 0.26868700981140137, -0.22065629065036774, -0.21406865119934082, -0.16332149505615234, 0.19021749496459961, 0.15361544489860535, -0.29869744181632996, 
  -0.28186646103858948, -0.050282593816518784, 0.083209514617919922, 0.16975265741348267, -0.28519627451896667, -0.023298744112253189, 0.025203373283147812, -0.18440899252891541, -0.20977964997291565, -0.093530803918838501, 0.12400858849287033, -0.13825704157352448, -0.30020686984062195, 0.12865208089351654, -0.046544857323169708, -0.079099737107753754, -0.20051468908786774, 0.16002701222896576, -0.33080008625984192, 0.22791968286037445, -0.19886448979377747, -0.27434134483337402, -0.22530943155288696, 0.18085457384586334, -0.32973617315292358, 0.15142099559307098, -0.046164121478796005, 0.039967935532331467, -0.22669698297977448, -0.044877998530864716, 0.17712664604187012, -0.16199994087219238, -0.076051153242588043, -0.040733207017183304, 0.209601029753685, -0.28328382968902588, 0.1601579487323761, -0.19611477851867676, -0.22609938681125641, 0.032859064638614655, -0.05491793155670166, -0.065715163946151733, 0.13503161072731018, -0.30589756369590759, 0.010823074728250504, 0.17887428402900696, 0.22184613347053528, -0.20796896517276764, 0.33003813028335571, -0.063580073416233063, 0.14729373157024384, -0.037100128829479218, -0.029489506036043167, -0.22890137135982513, 0.10734138637781143, -0.075622297823429108, -0.052329361438751221, 0.056381773203611374, 0.084340497851371765, 0.18109919130802155, -0.16820846498012543, -0.23148168623447418, -0.039025008678436279, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 10,63 } };
const ALIGN(16) float tensor_data4[5*10] = { 
  0.25950980186462402, -0.4362013041973114, -0.37543743848800659, 0.3799406886100769, -0.3661169707775116, -0.3602491021156311, 0.11352977901697159, 0.27530676126480103, 0.59749668836593628, -0.13066655397415161, 
  -0.30823245644569397, 0.49575403332710266, -0.62226647138595581, 0.25578665733337402, 0.36755305528640747, -0.30591577291488647, 0.35968050360679626, -0.42484873533248901, 0.28625866770744324, 0.43496406078338623, 
  -0.086169175803661346, -0.047116562724113464, -0.48409187793731689, 0.49201983213424683, -0.016159594058990479, 0.2647068202495575, 0.60961306095123291, 0.33250772953033447, -0.20990659296512604, -0.033235985785722733, 
  0.28363218903541565, 0.30455249547958374, 0.03578639030456543, 0.22013604640960693, 0.50901788473129272, 0.2794346809387207, -0.018679546192288399, 0.22137945890426636, -0.40763282775878906, 0.44331419467926025, 
  -0.20114850997924805, 0.28023484349250793, 0.37041103839874268, -0.38733828067779541, -0.52234232425689697, -0.069060444831848145, -0.18401335179805756, -0.01085197925567627, -0.39708185195922852, 0.46985557675361633, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 5,10 } };
const TfArray<2, int> tensor_dimension5 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension6 = { 2, { 1,5 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,5 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,3,1 } };
const TfArray<1, int> outputs0 = { 1, { 5 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 5,4,2 } };
const TfArray<1, int> outputs1 = { 1, { 6 } };
const TfLiteSoftmaxParams opdata2 = { 1 };
const TfArray<1, int> inputs2 = { 1, { 6 } };
const TfArray<1, int> outputs2 = { 1, { 7 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 252, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 40, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 20, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 2520, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 256), (TfLiteIntArray*)&g0::tensor_dimension5, 40, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension6, 20, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension7, 20, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[3] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[3] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 8, };
const size_t tflNodes_subgraph_index[] = {0, 3, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  7, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 8;
  for (size_t i = 0; i < 8; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 3; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
